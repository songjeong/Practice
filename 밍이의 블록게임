import java.util.*;
import java.io.*;
 
/*
   사용하는 클래스명이 Solution 이어야 하므로, 가급적 Solution.java 를 사용할 것을 권장합니다.
   이러한 상황에서도 동일하게 java Solution 명령으로 프로그램을 수행해볼 수 있습니다.
 */
class Solution
{
       private static int N; // n*m
       private static int M; //n*m
       private static int Q; //명령어 수
       private static int visited[][];
       private static int stackcnt = 1 ;
       private static int maxcnt = 0;
    public static void main(String args[]) throws Exception
    {
        Scanner sc = new Scanner(System.in);
        int T; // testcase
        T=sc.nextInt();
        /*
           여러 개의 테스트 케이스가 주어지므로, 각각을 처리합니다.
        */
 
        for(int test_case = 1; test_case <= T; test_case++)
        {
            N = sc.nextInt();
            M = sc.nextInt();
            Q = sc.nextInt();
            char arr[][] = new char[N][M];
            visited = new int [N][M];
            ArrayList<String> command = new ArrayList<>(); //Q들을 저장하기 위함이다.
             
            sc.nextLine();
            for(int i=0;i<N;i++) {
                String temp = sc.nextLine();
                for(int j=0;j<M;j++) {
                    arr[i][j] = temp.charAt(j);
                }
            }
            for(int i = 0; i<Q; i++)
                command.add(sc.nextLine());
            /////////////////////////////////////////// 입력받은 것들 다 저장한 상태
            for(String cmd : command) {
                if(cmd.charAt(0)=='U') {
                    String newline = cmd.substring(2);
                    U(arr, newline);            
                }
                else if(cmd.charAt(0)=='R'){
                    R(arr);     
                }
                else if(cmd.charAt(0)=='L'){
                    L(arr);                   
                }
                else if(cmd.charAt(0)=='D'){
                    D(arr);
                }
            }
            System.out.println("#"+test_case);
            print(arr);
        }
    }
    ///////////////////////////////////////////////////////////////////////////////////  
    private static void U( char arr[][] , String newline){
        for(int i=0;i<M;i++){ 
            if(arr[0][i]!='#') {
                return;
            }
        }
         
        // 상위에 하나라도 차 있는지 검사. 차 있을 경우 빠져나옴
        for(int i = 0 ; i <N-1; i++){
            for( int j =0; j<M; j++){
                arr[i][j] = arr[i+1][j];
            }
        }
        for(int j=0;j<M;j++){
            arr[N-1][j]=newline.charAt(j);
        }
        // 한칸씩 올리고 
        emptycheck(arr);
        // 빈 공간 체크
    }
    ////////////////////////////////////////////////////////////////
        private static void R(char arr[][]){
         
        for(int i = 0 ; i <N; i++){
            for( int j =M-1; j>=0; j--){
                if(arr[i][j] == '#'){
                    for(int k = j-1; k>=0; k--){
                        if(arr[i][k]!='#'){
                            char temp = arr[i][j];
                            arr[i][j]= arr[i][k];
                            arr[i][k]=temp;
                            break;
                        }
                    }
                }
            }
        }
    }
        ////////////////////////////////////////////////////////////////
        private static void L(char arr[][]){
         
        for(int i = 0 ; i <N; i++){
            for( int j =0; j<M-1; j++){
                if(arr[i][j] == '#'){
                    for(int k = j+1; k<M; k++){
                        if(arr[i][k]!='#'){
                            char temp = arr[i][j];
                            arr[i][j]= arr[i][k];
                            arr[i][k]=temp;
                            break;
                        }
                    }
                }
            }
        }
    }
    ////////////////////////////////////////////////////////////////
        private static void D(char arr[][]){
            maxcnt = 0;
        // Visited 초기화
            for (int i = 0; i < N; i++) {
                    for (int j = 0; j < M; j++){
                        visited[i][j] = 0;
                    }
                }
             
        for(int i = 0 ; i <N; i++){
            for( int j =0; j<M; j++){
                    dfs(arr, arr[i][j], i,j);
                    stackcnt = 0;
            }
        }
             for(int i=0;i<N;i++) {
                for(int j=0;j<M;j++) {
                    if(visited[i][j] == maxcnt){
                        dfsdel(arr,arr[i][j],i,j);
                    }
                }
            }
             
           for (int i = 0; i < N; i++) {
                    for (int j = 0; j < M; j++){
                        if(visited[i][j]==maxcnt){
                            dfsdel(arr,arr[i][j],i,j);
                        }
                   }
            }
            emptycheck(arr);
     }
    ////////////////////////////////////////////////////////////////////////////////
    private static void dfs(char arr[][], char c, int i, int j) {
    if(i<0 || j<0 || i>N-1 || j>M-1)
        return;
    if (arr[i][j] == '#')
        return;    
    if (visited[i][j] != 0)
        return;
    if (c != arr[i][j])
        return;
    ++stackcnt;
    if (maxcnt < stackcnt)
        maxcnt = stackcnt;
    visited[i][j] = stackcnt;
    dfs(arr,c, i-1, j);
    dfs(arr,c, i, j+1);
    dfs(arr,c, i+1, j);
    dfs(arr,c, i, j-1);
}
        ////////////////////////////////////////////////////////////////////////////////
    private static void dfsdel(char arr[][], char c, int i, int j) {
    
    if(i<0 || j<0 || i>N-1 || j>M-1)
        return;
    if (arr[i][j] == '#')
        return;
    if (c != arr[i][j])
        return;
   
    arr[i][j] = '#';
    dfsdel(arr,c, i+1, j);
    dfsdel(arr,c, i-1, j);
    dfsdel(arr,c, i, j+1);
    dfsdel(arr,c, i, j-1);
}
    ////////////////////////////////////////////////////////////////////////////////
    private static void emptycheck(char arr[][]){
        for(int j = 0; j< M; j++){
            for( int i = N-1; i >=0; i--){
                if(arr[i][j] == '#'){
                    for(int k = i-1; k>=0; k--){
                        if(arr[k][j]!='#'){
                            char temp = arr[i][j];
                            arr[i][j]= arr[k][j];
                            arr[k][j]=temp;
                            break;
                        }
                }
            }
        }
    }
    }
    ///////////////////////////////////////////////////////////
    private static void print(char arr[][]){
                for(int i=0;i<N;i++) {
                for(int j=0;j<M;j++) {
                    System.out.print(arr[i][j]);
                }
                    System.out.println();
                }
        System.out.println();
    }
    ////////////////////////////////////////////////////////////
}
